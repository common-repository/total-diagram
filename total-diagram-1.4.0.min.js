class TotalUtils
{random(min,max)
{return(Math.random()*(max-min)+min);}
notify(text)
{console.log('[Total Diagram] '+text);}
warning(text)
{console.warn('[Total Diagram] Warning: '+text);}
error(text)
{console.error('[Total Diagram] Error: '+text);}
suffix()
{if(total.config.production==false)return'?'+Date.now();return'';}
message(text)
{if(!('Notification'in window))
{alert(text);}
if(Notification.permission==='granted')
{const notification=new Notification(text);}
else if(Notification.permission!=='denied')
{Notification.requestPermission(function(permission)
{if(permission==='granted')
{const notification=new Notification(text);}});}}}
Array.prototype.remove=function(element)
{const index=this.indexOf(element);if(index!==-1)this.splice(index,1);};if(typeof String.prototype.capitalize!='function')
String.prototype.capitalize=function()
{return this.charAt(0).toUpperCase()+this.slice(1);};if(typeof String.prototype.replaceAll!='function')
String.prototype.replaceAll=function(search,replacement)
{return this.replace(new RegExp(search,'g'),replacement);};if(typeof String.prototype.replaceLast!='function')
String.prototype.replaceLast=function(search,replacement)
{return this.replace(new RegExp(search+'$'),replacement);};if(typeof String.prototype.findAllIndices!='function')
String.prototype.findAllIndices=function(searchStr)
{if(searchStr.length==0)return[];let startIndex=0,index,indices=[];while((index=this.indexOf(searchStr,startIndex))>-1)
{indices.push(index);startIndex=index+searchStr.length;}
return indices;}
if(typeof String.prototype.ext!='function')
String.prototype.ext=function()
{return this.substring(this.lastIndexOf('.')+1,this.length)||'';};if(typeof String.prototype.slug!='function')
String.prototype.slug=function()
{return this.replace(/ą/g,'a').replace(/Ą/g,'A').replace(/ć/g,'c').replace(/Ć/g,'C').replace(/ę/g,'e').replace(/Ę/g,'E').replace(/ł/g,'l').replace(/Ł/g,'L').replace(/ń/g,'n').replace(/Ń/g,'N').replace(/ó/g,'o').replace(/Ó/g,'O').replace(/ś/g,'s').replace(/Ś/g,'S').replace(/ż/g,'z').replace(/Ż/g,'Z').replace(/ź/g,'z').replace(/Ź/g,'Z').toLowerCase().replace(/\s+/g,'-').replace(/[^\w\-]+/g,'').replace(/\-\-+/g,'-').replace(/^-+/,'').replace(/-+$/,'');}
class TotalClipboard
{constructor()
{this.text='';this.json=null;this.empty=true;}
clear()
{this.text='';this.json=null;}
copyText(data)
{this.text=data;this.empty=false;}
pasteText()
{this.empty=true;return this.text;}
hasText()
{return!this.empty|this.text>0?true:false;}
copyJson(data)
{this.json=data;this.empty=false;}
pasteJson()
{this.empty=true;return this.json;}
hasJson()
{return!this.empty|this.json?true:false;}}
class TotalJSON
{constructor()
{}
encode(nodes)
{let json={"format":"Total JSON","version":3,"nodes":[]};for(let node of nodes)
{json.nodes.push({"id":node.id,"parent":node.parent,"folder":node.folder,"type":node.constructor.name,"x":node.x,"y":node.y,"z":node.z,"w":node.width,"h":node.height,"links":node.links,"meta":node.meta,"silent":node.silent});}
return json;}
decode(json,offset)
{if(json.format=='Total JSON'&&json.version==3)
{let dim=this.computePosition(json.nodes);let ids={};let nodes=[];for(let nodeattr of json.nodes)
{let oldID=nodeattr.id;nodeattr.id=null;nodeattr.x=((nodeattr.x-dim.minX)-dim.cx)+offset.x;nodeattr.y=((nodeattr.y-dim.minY)+dim.cy)+offset.y;let nodetype=eval(nodeattr.type);let newnode=new nodetype(nodeattr);total.graph.addNode(newnode);ids[oldID]=newnode.id;nodes.push(newnode);}
for(let node of nodes)
{if(node.parent)node.parent=ids[node.parent];}
for(let node of nodes)
{total.data.set(node.id,node.data());}}}
computePosition(nodes)
{let dim={minX:null,minY:null,maxX:null,maxY:null,w:null,h:null,cx:null,cy:null,rx:null,ry:null};for(let nodeattr of nodes)
{if(dim.minX===null||nodeattr.x<dim.minX)dim.minX=nodeattr.x;if(dim.minY===null||nodeattr.y<dim.minY)dim.minY=nodeattr.y;if(dim.maxX===null||nodeattr.x+nodeattr.w>dim.maxX)dim.maxX=nodeattr.x+nodeattr.w;if(dim.maxY===null||nodeattr.y+nodeattr.h>dim.maxY)dim.maxY=nodeattr.y+nodeattr.h;}
dim.w=dim.maxX-dim.minX;dim.h=dim.maxY-dim.minY;dim.cx=0.0;dim.cy=0.0;return dim;}}
class TotalLink
{constructor(options)
{this.obj3d=null;this.start=options.start;this.end=options.end;if(options.start.x!==undefined)
{this.x1=options.start.cx;this.y1=options.start.cy;this.z1=options.start.z-0.01;this.x2=options.end.cx;this.y2=options.end.cy;this.z2=options.end.z-0.01;}}
show()
{this.obj3d.visible=true;}
hide()
{this.obj3d.visible=false;}}
class TotalNode
{constructor(options)
{this.id=options.id;this.obj3d=null;this.x=(options!==undefined&&options.x!==undefined)?options.x:0;this.y=(options!==undefined&&options.y!==undefined)?options.y:0;this.z=(options!==undefined&&options.z!==undefined)?options.z:0;this.width=0;this.height=0;this.offset={x:0,y:0};this.stored={rz:null,z:null,clear:function()
{this.rz=null;this.z=null;},hasData:function()
{if(this.rz!==null&&this.z!==null)return true;return false;},};this.selected=null;this.links=(options!==undefined&&options.links!==undefined)?options.links:[];this.linksIn=[];this.linksOut=[];this.parent=null;this.children=[];this.meta={};this.unsaved=false;this.menu=null;this.state='default';this.silent=(options!==undefined&&options.silent!==undefined)?options.silent:false;}
destructor()
{}
getID(id)
{if(id==undefined)return this.id;else if(this.id===id)return this.id;else if(this.obj3d&&this.obj3d.uuid===id)return this.obj3d.uuid;return null;}
cache(obj3d=null)
{this.obj3d=obj3d;let dim=this.getDimensions();this.width=dim.width;this.height=dim.height;let frameMargin=1.0;let fameHalfWidth=(this.width/2.0)+frameMargin;let fameHalfHeight=(this.height/2.0)+frameMargin;let boxGeom=new THREE.Geometry();boxGeom.vertices.push(new THREE.Vector3(-fameHalfWidth,-fameHalfHeight,0),new THREE.Vector3(-fameHalfWidth,fameHalfHeight,0),new THREE.Vector3(fameHalfWidth,fameHalfHeight,0),new THREE.Vector3(fameHalfWidth,-fameHalfHeight,0),new THREE.Vector3(-fameHalfWidth,-fameHalfHeight,0));this.selected=new THREE.Line(boxGeom,three.material.line);this.selected.name='TotalSelect';this.selected.computeLineDistances();this.obj3d.add(this.selected);this.selected.position.x=this.ox;this.selected.position.y=this.oy;this.selected.visible=false;}
getDimensions()
{let min={x:null,y:null};let max={x:null,y:null};for(let mesh of this.obj3d.children)
{if(mesh.geometry)
{mesh.geometry.computeBoundingBox();if(mesh.geometry.type=='ShapeBufferGeometry'||mesh.geometry.type=='BufferGeometry')
{if(min.x==null||mesh.geometry.boundingBox.min.x<min.x)min.x=mesh.geometry.boundingBox.min.x;if(min.y==null||mesh.geometry.boundingBox.min.y<min.y)min.y=mesh.geometry.boundingBox.min.y;if(max.x==null||mesh.geometry.boundingBox.max.x>max.x)max.x=mesh.geometry.boundingBox.max.x;if(max.y==null||mesh.geometry.boundingBox.max.y>max.y)max.y=mesh.geometry.boundingBox.max.y;}}}
return{width:max.x-min.x,height:max.y-min.y};}
setPosition(x,y,z=null)
{this.x=x;this.y=y;if(z!==null)this.z=z;this.obj3d.position.x=this.x;this.obj3d.position.y=this.y;if(z!==null)this.obj3d.position.z=this.z;for(let link of this.linksOut)
{link.obj3d.geometry.vertices[0].x=this.cx;link.obj3d.geometry.vertices[0].y=this.cy;link.obj3d.geometry.verticesNeedUpdate=true;}
for(let link of this.linksIn)
{link.obj3d.geometry.vertices[1].x=this.cx;link.obj3d.geometry.vertices[1].y=this.cy;link.obj3d.geometry.verticesNeedUpdate=true;}}
addPosition(x,y,z)
{this.x+=x;this.y+=y;this.z+=z;this.obj3d.position.x=this.x;this.obj3d.position.y=this.y;this.obj3d.position.z=this.z;for(let link of this.linksOut)
{link.obj3d.geometry.vertices[0].x=this.cx;link.obj3d.geometry.vertices[0].y=this.cy;link.obj3d.geometry.vertices[0].z=this.z-0.01;link.obj3d.geometry.verticesNeedUpdate=true;}
for(let link of this.linksIn)
{link.obj3d.geometry.vertices[1].x=this.cx;link.obj3d.geometry.vertices[1].y=this.cy;link.obj3d.geometry.vertices[1].z=this.z-0.01;link.obj3d.geometry.verticesNeedUpdate=true;}}
setPositionOnGround(z=0.0)
{if(this.stored.hasData())
{this.z=this.stored.z;this.obj3d.position.z=this.z;this.obj3d.rotation.z=this.stored.rz;this.stored.clear();}
this.offset.x=0.0;this.offset.y=0.0;}
setPositionOnFocus(z=3.0)
{this.stored.z=this.obj3d.position.z;this.stored.rz=this.obj3d.rotation.z;this.z=z;this.obj3d.position.z=this.z;this.obj3d.rotation.z=0.0;}
getPosition()
{return this.obj3d.position;}
setRotation(x,y,z)
{this.obj3d.rotation.x=x;this.obj3d.rotation.y=y;this.obj3d.rotation.z=z;}
data()
{return{id:this.id,parent:(this.parent?this.parent.id:''),x:this.x,y:this.y,z:this.z,links:this.links,meta:this.meta,silent:this.silent};}
save()
{total.data.set(this.id,this.data());}
saveRecursiveDown()
{this.save();for(let link of this.linksOut)
{link.end.saveRecursiveDown();}}
drag(deltaX,deltaY)
{if(this.parent)this.setParent(null);this.addPosition(deltaX,deltaY,0.0);}
dragRecursiveDown(deltaX,deltaY)
{if(this.parent)this.setParent(null);this.addPosition(deltaX,deltaY,0.0);for(let link of this.linksOut)
{link.end.dragRecursiveDown(deltaX,deltaY);}}
drop()
{}
ship()
{}
hover(event)
{}
keypress(event)
{}
paste(text)
{}
click(coords)
{let pos=this.getPosition();this.offset.x=coords.x-pos.x;this.offset.y=coords.y-pos.y;}
dblclick(coords)
{let pos=this.getPosition();this.offset.x=coords.x-pos.x;this.offset.y=coords.y-pos.y;}
select()
{if(this.selected)
{this.selected.visible=true;this.state='select';}
if(this.silent)this.showRecursiveDown();}
blur(event=null)
{}
deselect()
{if(this.selected)
{this.selected.visible=false;this.state='default';}
if(this.silent)
{this.hideRecursiveDown(true);this.show()}}
update()
{if(this.silent)this.silentMode(true);}
setParent(parent=null)
{if(parent)
{this.parent=parent;this.obj3d.parent=parent.obj3d;this.parent.children.push(this);}
else if(this.parent)
{this.parent.children.remove(this);this.obj3d.parent=three.scene;this.setPosition(this.x+this.parent.x,this.y+this.parent.y);this.parent=null;}}
getParent()
{return this.parent;}
getSubmesh(name)
{return this.obj3d.children.filter((mesh)=>{return(mesh.name==name)?true:false;});}
getLink(id)
{for(let link of this.linksIn)
{if(link.start.id==id||link.end.id==id)return link;}
for(let link of this.linksOut)
{if(link.start.id==id||link.end.id==id)return link;}
return null;}
option(option,value)
{this.meta[option]=value;}
get cx()
{return this.x+this.ox;}
get cy()
{return this.y+this.ox;}
get ox()
{return 0.0;}
get oy()
{return 0.0;}
show()
{this.obj3d.visible=true;for(let link of this.linksIn)
{link.show();}}
showRecursiveDown()
{this.show();for(let link of this.linksOut)
{link.end.showRecursiveDown();}}
hide()
{this.obj3d.visible=false;for(let link of this.linksIn)
{link.hide();}}
hideRecursiveDown(single=false)
{this.hide();for(let link of this.linksOut)
{link.end.hideRecursiveDown(single);}}
toggle()
{if(this.obj3d.visible)
{this.hide();}
else
{this.show();}}
toggleRecursiveDown()
{this.toggle();for(let link of this.linksOut)
{link.end.toggleRecursiveDown();}}
centerText()
{this.text.margin.left=this.ox-(this.text.getDimensions().width/2.0);this.text.update();}
silentMode(setter=null)
{if(setter!==null)
{if(setter==true)
{this.silent=true;this.deselect();}
else
{this.silent=false;this.showRecursiveDown();}
this.save();}
else
return this.silent;}
toggleSilentMode()
{if(this.silent)
{this.silent(false);}
else
{this.silent(true);}}}
three={renderer:null,scene:null,light:null,camera:null,controls:null,material:{'line':new THREE.LineDashedMaterial({color:0xffffff,linewidth:1,scale:1,dashSize:0.5,gapSize:0.5}),'fill':new THREE.MeshBasicMaterial({color:0xffffff}),'fillTrans':new THREE.MeshBasicMaterial({color:0xffffff,transparent:true,opacity:0.5}),'clipart':new THREE.MeshBasicMaterial({color:0x4b4b4b}),'note':{'yellow':new THREE.MeshBasicMaterial({color:0xe2e28a}),'orange':new THREE.MeshBasicMaterial({color:0xfca438}),'green':new THREE.MeshBasicMaterial({color:0xb5ea3b}),'blue':new THREE.MeshBasicMaterial({color:0x05c9c0}),'pink':new THREE.MeshBasicMaterial({color:0xf693b2}),},'folder':{'default':new THREE.MeshBasicMaterial({color:0x00b3ff}),'orange':new THREE.MeshBasicMaterial({color:0xffaf00}),'green':new THREE.MeshBasicMaterial({color:0x00bb90}),'grey':new THREE.MeshBasicMaterial({color:0x444f59}),'white':new THREE.MeshBasicMaterial({color:0xf7fdff}),},},animate:function()
{requestAnimationFrame(three.animate);three.renderer.render(three.scene,three.camera);},}
class TotalGraph
{constructor(canvas)
{this.canvas=canvas;this.canvasRect=this.canvas.getBoundingClientRect();this.nodes=[];this.obj3dPrototypes={};let ring=new THREE.RingGeometry(0.5,1.0,16);let mesh=new THREE.Mesh(ring,three.material.fill);mesh.name='Prototype of TotalNodeDummy';mesh.castShadow=false;mesh.receiveShadow=false;this.obj3dPrototypes['TotalNodeDummy']=mesh;this.startPosition={x:0.0,y:0.0,z:70.0};this.panFactor=25.0;three.scene=new THREE.Scene();var ambient=new THREE.AmbientLight(0xffffff);three.scene.add(ambient);three.camera=new THREE.PerspectiveCamera(36,(this.canvas.getBoundingClientRect().width/this.canvas.getBoundingClientRect().height),10,160);three.camera.position.set(this.startPosition.x,this.startPosition.y,this.startPosition.z);this.raycaster=new THREE.Raycaster();three.renderer=new THREE.WebGLRenderer({antialias:false});three.renderer.setPixelRatio(window.devicePixelRatio);three.renderer.setSize(this.canvas.getBoundingClientRect().width,this.canvas.getBoundingClientRect().height);three.renderer.autoClear=true;three.renderer.autoClearColor=true;three.renderer.setClearColor(0x003559);this.canvas.appendChild(three.renderer.domElement);three.animate();}
cache()
{this.canvasRect=this.canvas.getBoundingClientRect();}
loadMeshes()
{total.utils.notify('Loading meshes...');let promise=new Promise((resolve,reject)=>{let manager=new THREE.LoadingManager();manager.onStart=(url,itemsLoaded,itemsTotal)=>{total.utils.notify('Started loading file: '+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal+' files.');};manager.onLoad=()=>{total.utils.notify('Meshes loaded.');resolve('OK');};manager.onProgress=(url,itemsLoaded,itemsTotal)=>{total.utils.notify('Loading file: '+url+'.\nLoaded '+itemsLoaded+' of '+itemsTotal+' files.');};manager.onError=(url)=>{total.utils.error('There was an error loading '+url);resolve('ERROR');};for(let node of total.config.nodes)
{if(node.class.meshes&&Object.entries(node.class.meshes).length)
{let obj3d=new THREE.Object3D();obj3d.name='Prototype of '+node.class.type;obj3d.castShadow=false;obj3d.receiveShadow=false;this.obj3dPrototypes[node.class.type]=obj3d;}}
let loaderOBJ=new THREE.OBJLoader(manager);for(let node of total.config.nodes)
{if(node.class.meshes&&Object.entries(node.class.meshes).length)
{let obj3d=this.obj3dPrototypes[node.class.type];for(let[meshName,meshFile]of Object.entries(node.class.meshes))
{let url=node.dir+meshFile+total.utils.suffix();let ext=meshFile.substring(meshFile.length-3);if(ext=='obj')
{loaderOBJ.load(url,(object)=>{object.children[0].name=meshName;obj3d.add(object.children[0]);});}}}}});return promise;}
assignMeshes()
{total.utils.notify('Assigning meshes...');for(let node of this.nodes)
{three.scene.remove(node.obj3d);if(node.constructor.type in this.obj3dPrototypes)
{total.utils.notify('Node '+node.id+' -> mesh '+node.constructor.type);let obj3d=this.obj3dPrototypes[node.constructor.type].clone();obj3d.name=node.constructor.type;obj3d.position.set(node.x,node.y,node.z+total.utils.random(0.0,0.05));three.scene.add(obj3d);node.cache(obj3d);}
else
{total.utils.notify('Node '+node.id+' -> no external mesh');node.cache();}}
total.utils.notify('Assigned.');}
addDummyNode(node)
{if(node.id===undefined||node.id===null)node.id=this.generateID('node.',this.nodes);this.nodes.push(node);let obj3d=this.obj3dPrototypes['TotalNodeDummy'].clone();obj3d.name=node.constructor.type;obj3d.position.set(node.x,node.y,node.z);three.scene.add(obj3d);node.obj3d=obj3d;}
addNode(node)
{if(node.id===undefined||node.id===null)node.id=this.generateID('node.',this.nodes);this.nodes.push(node);let obj3d=null;if(node.constructor.type in this.obj3dPrototypes)
{obj3d=this.obj3dPrototypes[node.constructor.type].clone();obj3d.name=node.constructor.type;obj3d.position.set(node.x,node.y,node.z);three.scene.add(obj3d);node.obj3d=obj3d;}
node.cache(obj3d);}
getNode(id)
{for(let node of this.nodes)
{if(node.getID(id))return node;}
return null;}
getNodes()
{return this.nodes;}
delNode(id)
{let node=this.getNode(id);if(node)
{node.links=[];for(let link of node.linksOut)
{link.end.linksIn.remove(link);total.data.set(link.end.id,link.end.data());three.scene.remove(link.obj3d);}
node.linksOut=[];for(let link of node.linksIn)
{link.start.links.remove(id);link.start.linksOut.remove(link);total.data.set(link.start.id,link.start.data());three.scene.remove(link.obj3d);}
node.linksIn=[];if(node.obj3d)three.scene.remove(node.obj3d);this.nodes.remove(node);}}
delNodes()
{for(let node of this.nodes)
{this.delNode(node.id);}
this.nodes=[];}
updateNodes()
{total.utils.notify('Updating nodes...');for(let node of this.nodes)
{node.update();}
total.utils.notify('Nodes updated.');}
clearScene()
{for(let node of this.nodes)
{for(let link of node.linksOut)
{three.scene.remove(link.obj3d);}
three.scene.remove(node.obj3d);}
this.nodes=[];}
addLink(link)
{let linkgeom=new THREE.Geometry();linkgeom.vertices.push(new THREE.Vector3(link.x1,link.y1,link.z1),new THREE.Vector3(link.x2,link.y2,link.z2),);link.obj3d=new THREE.Line(linkgeom,three.material.line);link.obj3d.name='TotalLink';link.obj3d.geometry.verticesNeedUpdate=true;link.obj3d.computeLineDistances();link.start.linksOut.push(link);link.end.linksIn.push(link);three.scene.add(link.obj3d);}
getLinkBetweenNodes(node1,node2)
{for(let node_id of node1.links)
{if(node_id==node2.id)return node1.getLink(node_id);}
for(let node_id of node2.links)
{if(node_id==node1.id)return node2.getLink(node_id);}
return null;}
detachLink(link,node)
{node.links.remove(link.start.id);node.links.remove(link.end.id);node.linksIn.remove(link);node.linksOut.remove(link);}
delLink(link)
{three.scene.remove(link.obj3d);}
panView(x,y)
{let offset={x:x*(three.camera.position.z/this.panFactor),y:y*(three.camera.position.z/this.panFactor)};three.camera.position.x+=offset.x;three.camera.position.y-=offset.y;}
zoomView(z)
{three.camera.position.z+=z;if(three.camera.position.z<25.0)three.camera.position.z=25.0;if(three.camera.position.z>150.0)three.camera.position.z=150.0;}
zoomViewOut()
{this.zoomView(150.0);}
resetViewOrigin(x=this.startPosition.x,y=this.startPosition.y)
{three.camera.position.x=x;three.camera.position.y=y;}
resetViewZoom()
{three.camera.position.z=this.startPosition.z;}
generateID(prefix,table,lastid)
{lastid=(typeof lastid!=='undefined')?lastid:table.length;let newid=prefix+lastid;for(let item of table)
{if(item.id==newid)newid=this.generateID(prefix,table,lastid+1);}
return newid;}
screen2world(x,y)
{let mouse={x:((x/this.canvasRect.width)*2)-1,y:-((y/this.canvasRect.height)*2)+1};let vector=new THREE.Vector3(mouse.x,mouse.y,-1).unproject(three.camera);var dir=vector.sub(three.camera.position).normalize();var distance=-three.camera.position.z/dir.z;var pos=three.camera.position.clone().add(dir.multiplyScalar(distance));return pos;}
screen2collision(pos)
{}
screen2raycast(x,y)
{let nodes=[];let mouse={x:((x/this.canvasRect.width)*2)-1,y:-((y/this.canvasRect.height)*2)+1};this.raycaster.setFromCamera(mouse,three.camera);let intersects=this.raycaster.intersectObjects(three.scene.children,true);for(let intersect of intersects)
{let node=this.getNode(intersect.object.parent.uuid);if(!node)node=this.getNode(intersect.object.uuid);if(node)nodes.push(node);}
return nodes;}}
class TotalText
{constructor(node,text='',breakline=false,align='left',limit={columns:0,rows:0,total:0},frame={size:5.4},margin={left:0,right:0,top:0,bottom:0},color=0x222222)
{this.node=node;this.breakline=breakline;this.limit=limit;this.text=text;this.allowedKeys=['KeyA','KeyB','KeyC','KeyD','KeyE','KeyF','KeyG','KeyH','KeyI','KeyJ','KeyK','KeyL','KeyM','KeyN','KeyO','KeyP','KeyQ','KeyR','KeyS','KeyT','KeyU','KeyV','KeyW','KeyX','KeyY','KeyZ','Digit1','Digit2','Digit3','Digit4','Digit5','Digit6','Digit7','Digit8','Digit9','Digit0','Minus','Equal','IntlBackslash','BracketLeft','BracketRight','Semicolon','Quote','Backslash','Comma','Period','Slash','Space'];this.margin=margin;this.frame={min:1.5,size:0.0,max:frame.size,sizes:[],init:function(columns)
{let unit=((this.max-this.min)/columns);let value=this.min;for(let column=0;column<columns;column++)
{this.sizes.push(value);value+=unit;}},compute:function(length)
{let nr=Math.min(length-1,this.sizes.length-1);this.size=this.sizes[nr];}};this.frame.init(this.limit.columns);this.frame.compute(this.text.length);this.editing=false;this.cursor={position:0,column:0,row:0,};this.texture=new THREE.TextTexture({text:this.text,fontStyle:'normal',fontSize:36,fontFamily:'"Times New Roman", Times, serif',textAlign:align,padding:0.1,autoRedraw:true,});let material=new THREE.MeshBasicMaterial({map:this.texture,color:color,transparent:true,});let geometry=new THREE.PlaneGeometry(this.frame.size,this.frame.size,1,1);this.mesh=new THREE.Mesh(geometry,material);this.mesh.name='TotalText';this.mesh.scale.set(1.0,1.0/this.texture.aspect,1.0);this.mesh.position.x=(this.frame.size/2.0)+this.margin.left;this.mesh.position.y=-1.0*(((this.frame.size/2.0)*(1.0/this.texture.aspect))+this.margin.top);this.node.obj3d.add(this.mesh);}
destructor()
{this.node.obj3d.remove(this.mesh);delete this.mesh;}
edit(enabled)
{this.editing=enabled;if(enabled==true)
{this.cursor.position=this.text.length;let eols=[-1].concat(this.text.findAllIndices('\n'));this.cursor.column=this.cursor.position-eols[eols.length-1]-1;this.cursor.row=eols.length-1;}
this.update();}
keypress(event)
{if(event.code=='Enter')
{if(this.breakline)
{this.break();}
else
{this.end();}}
else if(event.code=='Backspace')
{this.del();}
else if(this.allowedKeys.includes(event.code))
{this.add(event.key);}}
count()
{return this.text.length;}
set(string)
{this.text=string;this.cursor.position=string.length;this.update();}
get()
{return this.text;}
add(string)
{if(this.cursor.column>=this.limit.columns-1)
{if(this.cursor.row<this.limit.rows-1)
{let dontBreak=[' ','.',',','-','+',':',';','?','[',']','{','}','(',')',"'","'"];if(!dontBreak.includes(string)&&this.text.substr(this.text.length-1)!=' ')
{this.text+='-';this.cursor.position+=1;}
this.break();this.text+=string;this.cursor.position+=string.length;}}
else
{this.text=[this.text.slice(0,this.cursor.position),string,this.text.slice(this.cursor.position)].join('');this.cursor.position+=string.length;this.cursor.column+=string.length;}
this.update();}
del()
{if(this.cursor.position>0)
{this.text=[this.text.slice(0,this.cursor.position-1),this.text.slice(this.cursor.position)].join('');this.cursor.position--;this.cursor.column--;if(this.cursor.column<0)
{let eols=[-1].concat(this.text.findAllIndices('\n'));this.cursor.column=this.cursor.position-eols[eols.length-1]-1;}
this.update();}}
break()
{if(this.text.findAllIndices('\n').length<this.limit.rows)
{this.text=[this.text.slice(0,this.cursor.position),String.fromCharCode(10),this.text.slice(this.cursor.position)].join('');this.cursor.position++;this.cursor.column=0;this.update();}}
end()
{this.edit(false);this.node.blur();}
breakWord()
{}
getDimensions()
{if(this.mesh.geometry)
{this.mesh.geometry.computeBoundingBox();return{width:this.mesh.geometry.boundingBox.max.x-this.mesh.geometry.boundingBox.min.x,height:this.mesh.geometry.boundingBox.max.y-this.mesh.geometry.boundingBox.min.y};}
return{width:0,height:0};}
reconstructor()
{this.mesh.scale.set(1.0,1.0,1.0);this.mesh.geometry.vertices[0].x=-1.0*(this.frame.size/2.0);this.mesh.geometry.vertices[1].x=(this.frame.size/2.0);this.mesh.geometry.vertices[2].x=-1.0*(this.frame.size/2.0);this.mesh.geometry.vertices[3].x=(this.frame.size/2.0);this.mesh.geometry.vertices[0].y=(this.frame.size/2.0);this.mesh.geometry.vertices[1].y=(this.frame.size/2.0);this.mesh.geometry.vertices[2].y=-1.0*(this.frame.size/2.0);this.mesh.geometry.vertices[3].y=-1.0*(this.frame.size/2.0);this.mesh.geometry.verticesNeedUpdate=true;this.update();}
cursorInject(text)
{if(this.editing)
{return[text.slice(0,this.cursor.position),text.slice(this.cursor.position)].join('|');}
return text;}
cursorLeft()
{this.cursor.position--;if(this.cursor.position<0)
{this.cursor.position=this.text.length;}
this.cursor.column--;if(this.cursor.column<0)
{if(this.cursor.row>0)this.cursor.row--;let eols=this.text.findAllIndices('\n');for(let eol of eols)
{if(this.cursor.position>eol)
{this.cursor.column=eol;break;}}}
this.update();}
cursorRight()
{this.cursor.position++;if(this.cursor.position>this.text.length)this.cursor.position=0;this.cursor.column++;this.update();}
cursorLineUp()
{let eols=this.text.findAllIndices('\n').reverse().concat([0]);for(let eol of eols)
{if(this.cursor.position>eol)
{this.cursor.position=eol;break;}}
if(this.cursor.position<0)this.cursor.position=0;this.update();}
cursorLineDn()
{let eols=this.text.findAllIndices('\n');eols.push(this.text.length);for(let eol of eols)
{if(this.cursor.position<eol)
{this.cursor.position=eol;break;}}
if(this.cursor.position>this.text.length)this.cursor.position=this.text.length;this.update();}
update()
{let display_text=this.cursorInject(this.text);this.texture.text=display_text;this.frame.compute(display_text.length);this.mesh.scale.set(1.0,1.0/this.texture.aspect,1.0);this.mesh.geometry.vertices[0].x=-1.0*(this.frame.size/2.0);this.mesh.geometry.vertices[1].x=(this.frame.size/2.0);this.mesh.geometry.vertices[2].x=-1.0*(this.frame.size/2.0);this.mesh.geometry.vertices[3].x=(this.frame.size/2.0);this.mesh.geometry.vertices[0].y=(this.frame.size/2.0);this.mesh.geometry.vertices[1].y=(this.frame.size/2.0);this.mesh.geometry.vertices[2].y=-1.0*(this.frame.size/2.0);this.mesh.geometry.vertices[3].y=-1.0*(this.frame.size/2.0);this.mesh.geometry.verticesNeedUpdate=true;this.mesh.position.x=(this.frame.size/2.0)+this.margin.left;this.mesh.position.y=-1.0*(((this.frame.size/2.0)*(1.0/this.texture.aspect))+this.margin.top);}}
class TotalQueue
{constructor(name)
{this.name=name;this.queue=[];this.lastTime=Date.now()/1000;this.timedelta=0;this.timedeltaAvg=0;}
push(request)
{this.queue.push(request);let delta=this.timeDelta();this.timedeltaAvg=(this.timedelta+delta)/2;this.timedelta=delta;if(this.count()==5)this.flush();}
timeDelta()
{if(this.count()==0)return 0;let now=Date.now()/1000;let timedelta=now-this.lastTime;this.lastTime=now;return timedelta;}
count()
{return this.queue.length;}
flush()
{console.log('Flushing queue '+this.name+': '+this.combine(this.queue));this.clear();}
clear()
{this.queue=[];this.lastTime=Date.now()/1000;this.timedelta=0;this.timedeltaAvg=0;}
combine(requests)
{let buffer='';for(let request of requests)
{buffer+=request;buffer+='&';}
return buffer;}
log()
{console.log('Queue '+this.name+': '+this.count()+' since '+Math.round(this.timedelta)+'s (avg. '+Math.round(this.timedeltaAvg)+')');}
logResponse()
{console.log('Saved response reveived');}}
class TotalData
{constructor(folder)
{this.folder=folder;this.unsaved=false;this.queue={node:new TotalQueue('node'),file:new TotalQueue('file')};window.addEventListener('beforeunload',(event)=>{var confirmationMessage='\o/';if(this.unsaved)
{(event||window.event).returnValue=confirmationMessage;return confirmationMessage;}
else
{return null;}});}
set(key,value)
{this.unsaved=true;let folder=this.folder;const requestData=encodeURI('action=total_set&security='+total.session.nonce+'&key='+key+'&value='+JSON.stringify(value).replaceAll('&','%26').replaceAll('\\+','%2B')+'&folder='+folder);this.queue.node.push(requestData);this.queue.node.log();let promise=new Promise((resolve,reject)=>{let callbackProgress=(event)=>{};let callbackError=(event)=>{total.utils.error(event.target.status);resolve();};let callbackLoad=(event)=>{this.unsaved=false;this.queue.node.logResponse();resolve();};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callbackProgress;request.onload=callbackLoad;request.onerror=callbackError;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(requestData);});return promise;}
del(key)
{this.unsaved=true;let folder=this.folder;let promise=new Promise((resolve,reject)=>{let callbackProgress=(event)=>{};let callbackError=(event)=>{total.utils.error(event.target.status);};let callbackLoad=(event)=>{this.unsaved=false;resolve();};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callbackProgress;request.onload=callbackLoad;request.onerror=callbackError;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(encodeURI('action=total_del&security='+total.session.nonce+'&key='+key+'&folder='+folder));});return promise;}
cd(folder)
{if(folder.startsWith('/'))
{this.folder=folder;}
else
{this.folder+=folder;}}
getNodes()
{let folder=this.folder;let promise=new Promise((resolve,reject)=>{let callback={progress:function(event)
{},error:function(event)
{total.utils.error(event.target.status);},load:function(event)
{resolve(JSON.parse(this.responseText).nodes);},};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callback.progress;request.onload=callback.load;request.onerror=callback.error;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(encodeURI('action=total_get_nodes&security='+total.session.nonce+'&folder='+folder));});return promise;}
getMedia()
{let promise=new Promise((resolve,reject)=>{let callback={progress:function(event)
{},error:function(event)
{total.utils.error(event.target.status);},load:function(event)
{resolve(JSON.parse(this.responseText));},};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callback.progress;request.onload=callback.load;request.onerror=callback.error;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(encodeURI('action=total_get_media&security='+total.session.nonce));});return promise;}
fetchUrl(url)
{let promise=new Promise((resolve,reject)=>{let callbackProgress=(event)=>{};let callbackError=(event)=>{total.utils.error(event.target.status);};let callbackLoad=(event)=>{resolve(event.target.responseText);};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callbackProgress;request.onload=callbackLoad;request.onerror=callbackError;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(encodeURI('action=total_fetch&security='+total.session.nonce+'&url='+url));});return promise;}
fetchFile(filename)
{let promise=new Promise((resolve,reject)=>{let callback={progress:function(event)
{},error:function(event)
{total.utils.error(event.target.status);},load:function(event)
{resolve(this.responseText);},};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callback.progress;request.onload=callback.load;request.onerror=callback.error;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(encodeURI('action=total_get_file&security='+total.session.nonce+'&filename='+filename));});return promise;}
sendFile(filename,content)
{const requestData=encodeURI('action=total_set_file&security='+total.session.nonce+'&filename='+filename+'&content='+content.replaceAll('&','%26').replaceAll('\\+','%2B'));this.queue.file.push(requestData);this.queue.file.log();let promise=new Promise((resolve,reject)=>{let callback={progress:function(event)
{},error:function(event)
{total.utils.error(event.target.status);},load:function(event)
{resolve(this.responseText);},};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callback.progress;request.onload=callback.load;request.onerror=callback.error;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(requestData);});return promise;}
uploadFile(file)
{let promise=new Promise((resolve,reject)=>{let form_data=new FormData();form_data.append('file',file);form_data.append('action','total_upload_file');form_data.append('security',total.session.nonce);jQuery.ajax({url:this.getEndpoint(),type:'post',contentType:false,processData:false,data:form_data,success:function(response)
{resolve(JSON.parse(response));},error:function(response)
{reject();}});});return promise;}
deleteFile(dir,file)
{const requestData=encodeURI('action=total_delete_file&security='+total.session.nonce+'&dir='+dir+'&file='+file);let promise=new Promise((resolve,reject)=>{let callback={progress:function(event)
{},error:function(event)
{total.utils.error(event.target.status);},load:function(event)
{resolve();},};const request=new XMLHttpRequest();request.open('POST',this.getEndpoint(),true);request.onprogress=callback.progress;request.onload=callback.load;request.onerror=callback.error;request.setRequestHeader('Content-Type','application/x-www-form-urlencoded');request.send(requestData);});return promise;}
getEndpoint()
{return total.url.endpoint+'?timestamp='+(new Date()).getTime();}
encodeArgs(args)
{let result='';for(let key in args)
{let value=args[key];result+=key+'='+value.replaceAll('&','%26').replaceAll('\\+','%2B')+'&';}
return encodeURI(result.slice(0,-1));}}
class TotalMenu
{constructor(parent)
{this.menu={'root':document.createElement('div')};this.menu['root'].classList.add('total-menu');this.hidden=false;this.nodeSelected=null;this.hide();parent.appendChild(this.menu['root']);}
addSubmenu(parent,id,name)
{let item=document.createElement('div');item.classList.add('total-menu-item');item.classList.add(id);item.innerHTML=name+'<span class="total-arrow">&rsaquo;</span>';this.menu[id]=document.createElement('div');this.menu[id].classList.add('total-menu');this.menu[id].style.display='none';this.menu[id].style.left='200px';this.menu[id].style.top='0px';item.appendChild(this.menu[id]);item.addEventListener('mousedown',(event)=>{if(!event.target.classList.contains('inactive'))
{event.stopPropagation();this.hide('submenus');for(let subitem of event.target.getElementsByClassName('total-menu-item'))
{if(subitem.dataset.for==undefined||subitem.dataset.for==this.nodeSelected.constructor.name)
{subitem.style.display='block';}
else
{subitem.style.display='none';}}
this.menu[id].style.display='block';}});this.menu[parent].appendChild(item);}
addItem(parent,id,name,callback,data={})
{if(parent in this.menu)
{let item=document.createElement('div');item.classList.add('total-menu-item');item.classList.add(id);for(let[dataKey,dataArg]of Object.entries(data))
{item.dataset[dataKey]=dataArg;}
item.innerHTML=name;item.addEventListener('mousedown',(event)=>{if(!event.target.classList.contains('inactive'))
{event.stopPropagation();this.hide();callback(event);}});this.menu[parent].appendChild(item);}}
addSeparator()
{let sep=document.createElement('hr');this.menu['root'].appendChild(sep);}
show(x,y,nodeSelected)
{if(this.hidden)
{this.nodeSelected=nodeSelected;this.menu['root'].style.left=x+'px';this.menu['root'].style.top=y+'px';this.menu['root'].style.display='block';this.hidden=false;}}
hide(id='all')
{if(!this.hidden)
{for(let[key,element]of Object.entries(this.menu))
{if(id=='all')
{element.style.display='none';this.nodeSelected=null;this.hidden=true;}
else if(id=='submenus'&&key!='root')
{element.style.display='none';}};}}
enable(id='all',content=null)
{if(id=='all')
{for(let item of this.menu['root'].getElementsByClassName('total-menu-item'))
{item.classList.remove('inactive');}}
else
{let item=this.menu['root'].getElementsByClassName(id)[0];if(item)
{item.classList.remove('inactive');if(content!==null)item.innerHTML=content;if(item.getElementsByClassName('total-menu').length)
{for(let subitem of item.getElementsByClassName('total-menu')[0].getElementsByClassName('total-menu-item'))
{subitem.classList.remove('inactive');}}}}}
disable(id='all',content=null)
{if(id=='all')
{for(let item of this.menu['root'].getElementsByClassName('total-menu-item'))
{item.classList.add('inactive');}}
else
{let item=this.menu['root'].getElementsByClassName(id)[0];if(item)
{item.classList.add('inactive');if(content!==null)item.innerHTML=content;}}}
position()
{return{x:parseInt(this.menu['root'].style.left.replace('px','')),y:parseInt(this.menu['root'].style.top.replace('px',''))};}}
class TotalOverlay
{constructor(parent)
{this.canvas=parent;this.element=document.createElement('div');this.element.id='total-overlay';this.element.classList.add('total-overlay');this.element.style.display='none';this.hidden=true;this.canvas.appendChild(this.element);this.clickListener=(event)=>{event.stopPropagation();if(event.target.nodeName!='CANVAS')this.click(event.target);else this.hide();};}
show()
{if(this.hidden)
{total.editor.lock();this.element.style.display='flex';this.hidden=false;this.canvas.addEventListener('click',this.clickListener);}}
hide()
{if(!this.hidden)
{this.element.dispatchEvent(new Event('total-overlay-blur'));this.canvas.removeEventListener('click',this.click);this.element.style.display='none';this.hidden=true;total.editor.unlock();}}
click(target)
{if(!this.hidden)
{let eventClick=new Event('total-overlay-click');eventClick.detail=target;this.element.dispatchEvent(eventClick);}}
html(content)
{this.element.innerHTML=content;}
clear()
{this.element.innerHTML='';}
keydown(event)
{if(event.keyCode=='S'.charCodeAt(0)&&(event.metaKey||event.ctrlKey))
{event.preventDefault();this.element.dispatchEvent(new Event('total-overlay-save'));}
else if(event.keyCode==13)
{event.preventDefault();this.element.dispatchEvent(new Event('total-overlay-enter'));}}
keyup(event)
{}
width(value=null)
{if(value)
{if(typeof(value)=='object')
{if('min'in value)this.element.style.minWidth=value.min;if('width'in value)this.element.style.width=value.width;if('max'in value)this.element.style.maxWidth=value.max;}
else
{this.element.style.width=value;}}
else return this.element.style.width;}
height(value=null)
{if(value)
{if(typeof(value)=='object')
{if('min'in value)this.element.style.minHeight=value.min;if('height'in value)this.element.style.height=value.height;if('max'in value)this.element.style.maxHeight=value.max;}
else
{this.element.style.height=value;}}
else return this.element.style.height;}}
class TotalNodes
{constructor(parent)
{this.editor=parent;this.types=[];this.lastType=TotalNodeNote;}
register()
{for(let node of total.config.nodes)
{this.types.push(node.class);this.editor.menu.addItem('total-menu-add-node','total-menu-add-node-'+node.name.slug(),node.name,(event)=>{let x=this.editor.menu.position().x-this.editor.canvasRect.x-document.documentElement.scrollLeft;let y=this.editor.menu.position().y-this.editor.canvasRect.y-document.documentElement.scrollTop;let clickedPos=total.graph.screen2world(x,y);this.add(clickedPos.x,clickedPos.y,node.class);});this.editor.menu.addItem('total-menu-type-node','total-menu-type-node-'+node.name.slug(),node.name,(event)=>{let nodeNewClass=event.target.dataset.type;this.change(this.editor.selected.pointed,nodeNewClass);},{'type':node.class.name});for(let entry of node.class.menu)
{this.editor.menu.addItem('total-menu-options-node','total-menu-options-node-'+entry.name.slug(),entry.name,(event)=>{if(this.editor.selected.pointed)
{this.editor.selected.pointed.option(event.target.dataset.option,event.target.dataset.value);this.editor.selected.pointed.setPositionOnGround(this.editor.groundLevel);total.data.set(this.editor.selected.pointed.id,this.editor.selected.pointed.data());}},{'for':node.class.name,'option':entry.option,'value':entry.value});}}}
load(mode='create')
{let promise=new Promise((resolve,reject)=>{total.utils.notify('Loading nodes...');total.data.getNodes().then((nodes)=>{total.utils.notify('Creating nodes...');for(let nodeattr of nodes)
{total.utils.notify('Adding '+nodeattr.type+' @'+nodeattr.x+','+nodeattr.y+','+nodeattr.z);let nodetype=null;try
{nodetype=eval(nodeattr.type);}
catch(e)
{if(e instanceof ReferenceError)
{total.utils.warning(nodeattr.type+" doesn't exist");}}
if(nodetype)
{let newnode=new nodetype(nodeattr);if(mode=='create')
{total.graph.addNode(newnode);}
else if(mode=='dummy')
{total.graph.addDummyNode(newnode);}}}
total.utils.notify('Nodes created.');total.utils.notify('Reparenting nodes...');for(let nodeattr of nodes)
{if(nodeattr.parent!='')
{let node=total.graph.getNode(nodeattr.id);let parent=total.graph.getNode(nodeattr.parent);node.setParent(parent);}}
total.utils.notify('Nodes reparented.');total.utils.notify('Creating links...');for(let node of total.graph.getNodes())
{for(let other of node.links)
{let start_node=node;let end_node=total.graph.getNode(other);if(end_node)
{total.utils.notify('Adding link '+start_node.id+'->'+end_node.id);total.graph.addLink(new TotalLink({start:start_node,end:end_node}));}
else
{total.utils.error('Error crating link from '+node.id+' to '+other+' (not found).');}}}
total.utils.notify('Links created.');resolve();});});return promise;}
add(node_x,node_y,type=null,id=null)
{if(!type)type=this.lastType;else this.lastType=type;let nodeattr={x:node_x,y:node_y};if(id)nodeattr.id=id;let nodetype=eval(type);let newnode=new nodetype(nodeattr);total.graph.addNode(newnode);if(!id)nodeattr.id=newnode.id;total.data.set(newnode.id,newnode.data());return newnode;}
del(node)
{const id=node.id;node.destructor();total.data.del(id);total.graph.delNode(id);}
change(node,nodeNewClass)
{if(node.obj3d)three.scene.remove(node.obj3d);total.graph.nodes.remove(node);let nodeattr={id:node.id,parent:node.parent?node.parent.id:null,x:node.x,y:node.y,z:node.z,links:node.links,meta:node.meta};let nodetype=eval(nodeNewClass);let newnode=new nodetype(nodeattr);newnode.linksOut=node.linksOut;newnode.linksIn=node.linksIn;total.graph.addNode(newnode);newnode.setPosition(newnode.x,newnode.y,newnode.z);total.data.set(newnode.id,newnode.data());this.lastType=nodeNewClass;}}
class TotalTransfer
{constructor(parent)
{this.parent=parent;this.inputFile=document.createElement('input');this.inputFile.type='file';this.inputFile.id='total-file-input';this.inputFile.accept='image/*, audio/*, video/*, text/*, '+
'application/msword, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.wordprocessingml.document, '+
'application/pdf, '+
'application/vnd.oasis.opendocument.chart, application/vnd.oasis.opendocument.graphics, application/vnd.oasis.opendocument.presentation, application/vnd.oasis.opendocument.spreadsheet, application/vnd.oasis.opendocument.text';this.inputFile.style.display='none';this.inputFile.style.position='absolute';this.inputFile.style.left='-1000px';this.parent.appendChild(this.inputFile);this.inputFile.addEventListener('change',(event)=>{if(this.hasFile())
{total.data.uploadFile(this.getFile()).then((fileInfo)=>{this.parent.dispatchEvent(new CustomEvent('total-file-upload-done',{detail:{dir:fileInfo.dir,file:fileInfo.file,mimetype:fileInfo.mimetype}}));});}});this.inputImage=document.createElement('input');this.inputImage.type='file';this.inputImage.id='total-image-input';this.inputImage.accept='image/*';this.inputImage.style.display='none';this.inputImage.style.position='absolute';this.inputImage.style.left='-1000px';this.parent.appendChild(this.inputImage);this.inputImage.addEventListener('change',(event)=>{if(this.hasImage())
{total.data.uploadFile(this.getImage()).then((fileInfo)=>{this.parent.dispatchEvent(new CustomEvent('total-image-upload-done',{detail:{dir:fileInfo.dir,file:fileInfo.file,thumb:fileInfo.thumb,mimetype:fileInfo.mimetype}}));});}});this.a=document.createElement('a');this.a.style.display='none';this.a.style.position='absolute';this.a.style.left='-1000px';this.parent.appendChild(this.a);this.mimetype={images:['image/png','image/jpeg']};}
getEventSender()
{return this.parent;}
chooseFile()
{let promise=new Promise((resolve,reject)=>{this.inputFile.click();});return promise;}
hasFile()
{if(this.inputFile.files.length>0)return true;return false;}
getFile()
{return this.inputFile.files[0];}
downloadFile(dir,file)
{this.a.href=this.file2url(dir,file);this.a.download=file;this.a.click();}
deleteFile(dir,file)
{total.data.deleteFile(dir,file);}
chooseImage()
{let promise=new Promise((resolve,reject)=>{this.inputImage.click();});return promise;}
hasImage()
{if(this.inputImage.files.length>0)return true;return false;}
getImage()
{return this.inputImage.files[0];}
dropFile(event,file)
{const droppedPos=total.graph.screen2world(event.offsetX,event.offsetY);let newnode=null;if(this.mimetype.images.includes(file.type))
{newnode=new TotalNodeImage({x:droppedPos.x,y:droppedPos.y});}
else
{newnode=new TotalNodeFile({x:droppedPos.x,y:droppedPos.y});}
total.graph.addNode(newnode);total.data.uploadFile(file).then((fileInfo)=>{newnode.fileUploadSave(fileInfo);});}
dropItem(event,item)
{if(item.kind=='string'&&item.type.match('^text/plain'))
{item.getAsString((s)=>{let droppedPos=total.graph.screen2world(event.offsetX,event.offsetY);let newnode=new TotalNodeNote({x:droppedPos.x,y:droppedPos.y,meta:{text:s}});total.graph.addNode(newnode);newnode.save();});}}
file2url(dir,file)
{return total.url.upload+dir+file;}
}
class TotalEditor
{constructor(canvas)
{this.canvas=canvas;this.clipboard=new TotalClipboard();this.metaKey=false;this.vKey=false;this.json=new TotalJSON();this.pastebin=document.createElement('textarea');this.pastebin.style.display='none';this.pastebin.style.position='absolute';this.pastebin.style.left='-1000px';this.canvas.appendChild(this.pastebin);this.spinner=document.createElement('div');this.spinner.classList.add('total-spinner');this.canvas.appendChild(this.spinner);this.canvasRect=this.canvas.getBoundingClientRect();this.device={action:false,}
this.lastPos={x:0.0,y:0.0,deltaX:0.0,deltaY:0.0,clear:function()
{this.x=0.0;this.y=0.0;},set:function(vec)
{this.x=vec.x;this.y=vec.y;},update:function(vec)
{this.deltaX=vec.x-this.x;this.deltaY=vec.y-this.y;this.x=vec.x;this.y=vec.y;}};this.hovered=null;this.selected={nodes:[],pointed:null,link:null,add:function(node)
{this.nodes.push(node);},del:function(node)
{this.nodes.remove(node);},find:function(search)
{for(let node of this.nodes)
{if(search.id==node.id)return true;}
return false;},clear:function()
{for(let node of this.nodes)node.deselect();this.nodes=[];this.pointed=null;this.link=null;},count:function()
{return this.nodes.length;}};this.gesture={scale:{start_value:0.0,value:0.0,start:function(value)
{this.start_value=value;},update:function(value)
{this.value=value;},end:function(value)
{},get:function()
{return this.value;},}};this.locked=false;this.pixelPanFactor=0.018;this.pixelZoomFactor=0.5;this.groundLevel=0.0;this.dragLevel=2.0;this.focusLevel=3.0;this.overlay=new TotalOverlay(this.canvas);this.menu=new TotalMenu(this.canvas);this.nodes=new TotalNodes(this);this.canvas.addEventListener('contextmenu',(event)=>{if(!this.overlay.hidden)return true;event.preventDefault();this.menu.disable();if(!this.locked)
{let clickedNodes=total.graph.screen2raycast(event.offsetX,event.offsetY);if(!clickedNodes.length)
{this.selected.clear();this.menu.enable('total-menu-add-node');}
else
{this.selected.pointed=clickedNodes[0];if(!this.selected.find(this.selected.pointed))
{this.selected.pointed.select();this.selected.add(this.selected.pointed);}
this.menu.enable('total-menu-type-node');this.menu.enable('total-menu-options-node');if(this.selected.count()>1)
{this.menu.enable('total-menu-del-node','Delete nodes');}
else
{this.menu.enable('total-menu-del-node','Delete node');}}
if(this.selected.count()>0)
{if(this.selected.pointed.getPosition().z<10.0)this.menu.enable('total-menu-move-up');if(this.selected.pointed.getPosition().z>1.0)this.menu.enable('total-menu-move-down');}
if(this.selected.count()>0)
{this.menu.enable('total-menu-cut');this.menu.enable('total-menu-copy');}
if(this.clipboard.hasJson())
{this.menu.enable('total-menu-paste');}
if(this.selected.count()==2)
{this.menu.enable('total-menu-add-link');this.selected.link=total.graph.getLinkBetweenNodes(this.selected.nodes[0],this.selected.nodes[1]);if(this.selected.link)
{this.menu.enable('total-menu-del-link');}}}
this.menu.show(event.offsetX,event.offsetY,this.selected.pointed);return false;});this.menu.addSubmenu('root','total-menu-add-node','Add node');this.menu.addItem('root','total-menu-add-link','Add link',(event)=>{if(!this.locked)
{total.graph.addLink(new TotalLink({start:this.selected.nodes[0],end:this.selected.nodes[1]}));this.selected.nodes[0].links.push(this.selected.nodes[1].id);total.data.set(this.selected.nodes[0].id,this.selected.nodes[0].data());this.selected.clear();}});this.menu.addSeparator();this.menu.addSubmenu('root','total-menu-type-node','Node type');this.menu.addSubmenu('root','total-menu-options-node','Node options');this.menu.addSeparator();this.menu.addItem('root','total-menu-move-up','Move up',(event)=>{if(!this.locked)
{this.menu.hide();this.selected.pointed.addPosition(0,0,2);}});this.menu.addItem('root','total-menu-move-down','Move down',(event)=>{if(!this.locked)
{this.menu.hide();this.selected.pointed.addPosition(0,0,-2);}});this.menu.addSeparator();this.menu.addItem('root','total-menu-cut','Cut',(event)=>{if(!this.locked)
{this.menu.hide();this.clipboard.copyJson(this.json.encode(this.selected.nodes));for(let node of this.selected.nodes)
{this.nodes.del(node);}
this.selected.clear();}});this.menu.addItem('root','total-menu-copy','Copy',(event)=>{if(!this.locked)
{this.menu.hide();this.clipboard.copyJson(this.json.encode(this.selected.nodes));}});this.menu.addItem('root','total-menu-paste','Paste',(event)=>{if(!this.locked)
{this.menu.hide();this.json.decode(this.clipboard.pasteJson(),total.graph.screen2world(this.menu.position().x,this.menu.position().y));}});this.menu.addSeparator();this.menu.addItem('root','total-menu-del-node','Delete node',(event)=>{if(!this.locked&&this.selected.pointed)
{this.menu.hide();if(this.selected.count()==1)
{if(confirm('Delete node?'))
{this.nodes.del(this.selected.pointed);this.selected.clear();}}
else
{let msg='';if(this.selected.count()==2)msg='Delete 2 nodes?';else msg='Multiple nodes selected. Delete ALL '+this.selected.nodes.length+' nodes?'
if(confirm(msg))
{for(let node of this.selected.nodes)
{this.nodes.del(node);}
this.selected.clear();}}}});this.menu.addItem('root','total-menu-del-link','Delete link',(event)=>{if(!this.locked&&this.selected.link&&this.selected.count()==2)
{this.menu.hide();if(confirm('Delete link?'))
{total.graph.detachLink(this.selected.link,this.selected.nodes[0]);total.graph.detachLink(this.selected.link,this.selected.nodes[1]);total.graph.delLink(this.selected.link);total.data.set(this.selected.nodes[0].id,this.selected.nodes[0].data());total.data.set(this.selected.nodes[1].id,this.selected.nodes[1].data());this.selected.clear();}}});this.canvas.addEventListener('mousedown',(event)=>{if(!this.overlay.hidden)return true;if(this.locked||event.which!=1)return false;this.device.action=true;this.menu.hide();let clickedNodes=total.graph.screen2raycast(event.offsetX,event.offsetY);if(this.selected.pointed)
{if(!clickedNodes.length||(clickedNodes.length&&this.selected.pointed.id!=clickedNodes[0].id))
{this.selected.pointed.blur();this.selected.pointed.save();this.selected.pointed.setPositionOnGround(this.groundLevel);}}
if(!event.shiftKey&&this.selected.count()<2)this.selected.clear();if(clickedNodes.length)
{this.selected.pointed=clickedNodes[0];this.lastPos.set(total.graph.screen2world(event.offsetX,event.offsetY));clickedNodes[0].click(total.graph.screen2world(event.offsetX,event.offsetY));if(!this.selected.find(this.selected.pointed))
{this.selected.pointed.select();this.selected.add(this.selected.pointed);}
else if(event.shiftKey)
{this.selected.del(this.selected.pointed);this.selected.pointed.setPositionOnGround(this.groundLevel);this.selected.pointed.deselect();this.selected.pointed=null;}}
else
{this.selected.clear();}});this.canvas.addEventListener('mousemove',(event)=>{if(!this.overlay.hidden)return true;let pointedNodes=total.graph.screen2raycast(event.offsetX,event.offsetY);if(pointedNodes.length>0)
{this.hovered=pointedNodes[0];for(let node of pointedNodes)
{node.hover(event);}}
else
{this.hovered=null;}
if(!this.locked&&this.device.action)
{if(this.selected.count())
{this.lastPos.update(total.graph.screen2world(event.offsetX,event.offsetY));for(let node of this.selected.nodes)
{if(node.state!='drag')
{node.state='drag';node.blur();}
node.drag(this.lastPos.deltaX,this.lastPos.deltaY);}}
else
{total.graph.panView(-event.movementX*this.pixelPanFactor*2,-event.movementY*this.pixelPanFactor*2);}}
if(this.hovered)
{if(this.hovered.state=='drag')
{this.canvas.style.cursor='-webkit-grabbing';}
else if(this.hovered.state=='resize.nw')
{this.canvas.style.cursor='nw-resize';}
else if(this.hovered.state=='resize.n')
{this.canvas.style.cursor='n-resize';}
else if(this.hovered.state=='resize.ne')
{this.canvas.style.cursor='ne-resize';}
else if(this.hovered.state=='resize.e')
{this.canvas.style.cursor='e-resize';}
else if(this.hovered.state=='resize.se')
{this.canvas.style.cursor='se-resize';}
else if(this.hovered.state=='resize.s')
{this.canvas.style.cursor='s-resize';}
else if(this.hovered.state=='resize.sw')
{this.canvas.style.cursor='sw-resize';}
else if(this.hovered.state=='resize.w')
{this.canvas.style.cursor='w-resize';}
else if(this.hovered.state=='resize.nw')
{this.canvas.style.cursor='nw-resize';}
else
{this.canvas.style.cursor='default';}}
else
{this.canvas.style.cursor='default';}});this.canvas.addEventListener('mouseup',(event)=>{if(!this.overlay.hidden)return true;if(!this.locked&&event.which==1)
{this.device.action=false;if(this.selected.count())
{let pointedNodes=total.graph.screen2raycast(event.offsetX,event.offsetY);if(pointedNodes.length>1)
{for(let node of pointedNodes)
{node.drop();if(node!=this.selected.pointed)
{node.ship(this.selected.pointed);}}}
this.canvas.style.cursor='default';for(let node of this.selected.nodes)
{if(node.state=='drag')
{total.data.set(node.id,node.data());node.setPositionOnGround(this.groundLevel);node.state=='drop';}}}}});this.canvas.addEventListener('wheel',(event)=>{if(!this.overlay.hidden)return true;event.preventDefault();event.stopPropagation();if(event.ctrlKey)
{total.graph.zoomView(event.deltaY*this.pixelZoomFactor);this.menu.hide();}
else
{total.graph.panView(event.deltaX*this.pixelPanFactor,event.deltaY*this.pixelPanFactor);this.menu.hide();}});this.canvas.addEventListener('dblclick',(event)=>{if(!this.overlay.hidden)return true;if(!this.locked)
{let clickedPos=total.graph.screen2world(event.offsetX,event.offsetY);let pointedNodes=total.graph.screen2raycast(event.offsetX,event.offsetY);if(pointedNodes.length)
{pointedNodes[0].dblclick(clickedPos);}
else
{this.nodes.add(clickedPos.x,clickedPos.y);}}});document.addEventListener('keydown',(event)=>{if(!this.overlay.hidden)
{this.overlay.keydown(event);return true;}
if(!this.selected.pointed)
{if(event.keyCode==48)
{total.graph.resetViewOrigin();total.graph.resetViewZoom();}
else if(event.keyCode==189)
{total.graph.zoomViewOut();}
else if(event.keyCode==187)
{total.graph.resetViewZoom();}
else if(event.keyCode==32)
{event.preventDefault();}}
else if(this.selected.pointed)
{if(event.ctrlKey||event.metaKey)
{this.metaKey=true;}
if(this.metaKey&&event.code=='KeyV')
{this.vKey=true;this.pastebin.style.display='inline-block';this.pastebin.focus();}
else
{event.preventDefault();this.selected.pointed.keypress(event);}}});document.addEventListener('keyup',(event)=>{if(!this.overlay.hidden)
{this.overlay.keyup(event);return true;}
if(this.selected.pointed&&(event.key=='Control'||event.key=='Meta')&&this.metaKey&&this.vKey)
{this.metaKey=false;this.vKey=false;if(this.pastebin.value!='')
{this.pastebin.style.display='none';this.selected.pointed.paste(this.pastebin.value);this.pastebin.value='';this.pastebin.blur();}}});this.canvas.addEventListener('dragover',(event)=>{event.preventDefault();});this.canvas.addEventListener('drop',(event)=>{event.preventDefault();event.stopPropagation();let transfer=event.dataTransfer;let files=transfer.files;let items=transfer.items;for(let file of files)total.transfer.dropFile(event,file);for(let item of items)total.transfer.dropItem(event,item);});window.addEventListener('resize',()=>{three.camera.aspect=window.innerWidth/window.innerHeight;three.camera.updateProjectionMatrix();three.renderer.setSize(window.innerWidth,window.innerHeight);total.graph.cache();});this.focus();}
focus()
{this.canvas.focus();}
lock()
{this.locked=true;}
unlock()
{this.locked=false;}
busy()
{this.canvas.style.cursor='progress';this.spinner.style.display='inline-block';}
idle()
{this.canvas.style.cursor='default';this.spinner.style.display='none';}}
class TotalNodeImage extends TotalNode
{constructor(options)
{super(options);this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{text:'',dir:'',file:'',thumb:''};this.text=null;this.loader=new THREE.TextureLoader();this.loader.crossOrigin='anonymous';total.transfer.getEventSender().addEventListener('total-image-upload-done',this.imageUploadDone.bind(this));this.bindClick=this.onOverlayClick.bind(this);this.bindClose=this.onOverlayClose.bind(this);}
destructor()
{this.fileDelete();}
static get meshes()
{return{};}
static get type()
{return'TotalNodeImage';}
static get menu()
{return[];}
cache(obj3d)
{let box=new THREE.PlaneGeometry(8.8,10.7,1,1);let mesh=new THREE.Mesh(box,three.material.fill);mesh.name='TotalNodeImage';mesh.position.set(this.x,this.y,this.z);let box2=new THREE.PlaneGeometry(7.9,7.9,1,1);let material2=new THREE.MeshBasicMaterial({color:0x777777});this.photoMesh=new THREE.Mesh(box2,material2);this.photoMesh.name='TotalNodeImage:Photo';this.photoMesh.position.set(0.0,0.8,0.01);mesh.add(this.photoMesh);three.scene.add(mesh);super.cache(mesh);mesh.rotation.z=total.utils.random(-0.08,0.08);if(!this.text)
{this.text=new TotalText(this,this.meta.text,false,'center',{columns:30,rows:1,total:30},{size:8.8-0.3-0.3},{left:-4.0,top:4.0,right:0.0,bottom:0.0});}
if(this.meta.thumb)
{this.loadPhoto(total.transfer.file2url(this.meta.dir,this.meta.thumb));}}
data()
{let attr=super.data();attr['type']=this.constructor.name;this.meta.text=this.text?this.text.get():'';attr['meta']=this.meta;return attr;}
click(coords)
{super.click(coords);if(Math.abs(this.offset.y)>4.0)
{this.setPositionOnFocus();this.text.edit(true);}}
dblclick(coords)
{super.click(coords);if(Math.abs(this.offset.y)<=4.0)
{this.overlayOpen();}}
overlayOpen()
{total.editor.overlay.clear();if(!this.meta.file)
{total.editor.overlay.width({min:'50%',width:'unset',max:'99%'});total.editor.overlay.height({min:'40%',width:'unset',max:'99%'});total.editor.overlay.show();this.overlayLoadMediaLibrary();}
else
{total.editor.overlay.width({min:'unset',width:'auto',max:'99%'});total.editor.overlay.height({min:'unset',width:'auto',max:'99%'});total.editor.overlay.show();this.overlayShowLightBox();}}
overlayLoadMediaLibrary()
{total.editor.busy();total.data.getMedia().then((images)=>{let content='<div id="total-overlay-image-picker">';content+='<div id="total-overlay-add-new-image" title="Add new image">+</div>';for(let image of images)
{content+='<img class="node-image-thumb" src="'+image.url+'" data-dir="'+image.dir+'" data-file="'+image.file+'" data-thumb="'+image.thumb+'">';}
content+='</div>';total.editor.overlay.html(content);total.editor.overlay.element.addEventListener('total-overlay-click',this.bindClick,false);total.editor.overlay.element.addEventListener('total-overlay-blur',this.bindClose,false);total.editor.idle();});}
overlayShowLightBox()
{let content='<img class="node-image-view" src="'+total.transfer.file2url(this.meta.dir,this.meta.file)+'">';total.editor.overlay.html(content);}
onOverlayClick(event)
{const element=event.detail;if(element.nodeName=='DIV'&&element.id=='total-overlay-add-new-image')
{this.imageUpload();}
else if(element.nodeName=='IMG')
{total.editor.overlay.hide();this.meta.dir=element.dataset.dir;this.meta.file=element.dataset.file;this.meta.thumb=element.dataset.thumb;this.loadPhoto(element.src);this.save();this.blur();}}
onOverlayClose()
{total.editor.overlay.element.removeEventListener('total-overlay-click',this.bindClick,false);total.editor.overlay.element.removeEventListener('total-overlay-blur',this.bindClose,false);}
deselect()
{super.deselect();this.text.edit(false);}
blur()
{this.text.edit(false);}
keypress(event)
{this.text.keypress(event);}
imageUpload()
{total.transfer.chooseImage();}
imageUploadDone(event)
{this.fileUploadSave(event.detail);}
fileUploadSave(fileInfo)
{total.editor.overlay.hide();this.meta.dir=fileInfo.dir;this.meta.file=fileInfo.file;this.meta.thumb=fileInfo.thumb;this.loadPhoto(total.transfer.file2url(this.meta.dir,this.meta.thumb));this.save();this.blur();}
loadPhoto(url)
{this.loader.load(url,(texture)=>{this.photoMesh.material.color={r:1.0,g:1.0,b:1.0};this.photoMesh.material.map=texture;this.photoMesh.material.needsUpdate=true;},(xhr)=>{},(xhr)=>{});}
fileDelete()
{if(this.meta.file)
{if(confirm('Delete also picture from media library?'))
{total.transfer.deleteFile(this.meta.dir,this.meta.file);}}}
set width(value)
{}
set height(value)
{}
get width()
{return 8.8;}
get height()
{return 10.7;}}
class TotalNodePoint extends TotalNode
{constructor(options)
{super(options);this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{text:'',open:true};if(this.meta.open===undefined)this.meta.open=true;this.text=null;this.editingStarted=false;}
static get type()
{return'TotalNodePoint';}
static get meshes()
{return{};}
static get menu()
{return[];}
cache(obj3d)
{let ringOuter=new THREE.RingGeometry(1.6,1.65,20);let circleOuter=new THREE.Mesh(ringOuter,three.material.fillTrans);let ringMain=new THREE.RingGeometry(1.0,1.5,20);let circle=new THREE.Mesh(ringMain,three.material.fillTrans);circle.add(circleOuter);circle.name='TotalNodePoint';circle.position.set(this.x,this.y,this.z);three.scene.add(circle);super.cache(circle);if(!this.text)
{this.text=new TotalText(this,this.meta.text,false,'center',{columns:20,rows:1,total:0},{size:7.0},{left:0.0,top:-0.5,right:0.0,bottom:0.0},0xeeeeee);this.centerText();}}
data()
{let attr=super.data();attr['type']=this.constructor.name;this.meta.text=this.text?this.text.get():'';attr['meta']=this.meta;return attr;}
select()
{this.selected.position.x=0.0;this.selected.position.y=0.0;super.select();}
deselect()
{super.deselect();this.text.edit(false);}
click(coords)
{super.click(coords);this.text.edit(true);}
dblclick(coords)
{super.dblclick(coords);this.toggleRecursiveDown();this.meta.open=this.meta.open?false:true;this.toggle();this.save();}
blur()
{this.text.edit(false);}
keypress(event)
{if(!this.editingStarted&&event.key!='Shift')
{this.setPositionOnFocus();this.editingStarted=true;}
this.text.keypress(event);this.centerText();}
paste(text)
{this.text.add(text);}
update()
{super.update();if(!this.meta.open)
{this.hideRecursiveDown();this.show();}}
set width(value)
{}
set height(value)
{}
get width()
{return 1.65;}
get height()
{return 1.65;}
get cx()
{return this.x;}
get cy()
{return this.y;}}
class TotalNodeClipart extends TotalNode
{constructor(options)
{super(options);this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{bg:'Heart'};this.arrowLeft=null;this.arrowRight=null;this.cliparts=['Heart','Exclamation','Question','Check','Times','Play','Stop','Info','ThumbsUp','ThumbsDown','Star','Bolt','Sun','Cloud','Calendar','CalendarCheck','Calculator','Poll','ProjectDiagram','Server','Desktop','Laptop','Tablet','Mobile','Keyboard','Gamepad','Headphones','Microphone','Camera','Download','HDD','SD','Microchip','Plug','Robot','Wifi','SMS','Sliders','Cog','Weight','Bug','Cat','Carrot','Tree','Home','Building','DoorOpen','Store','ShoppingCart','Industry','SolarPanel','Trash','Car','Truck','Bus','Subway','Plane','Rocket','SuitcaseRolling','Dolly','Globe','MapMarked','Yen','Euro','Dollar','Bill','CreditCard','Cookie','Cocktail','Key','LockOpen','LockClosed','Clock','Hourglass','Envelope','Paperclip','Feather','Thermometer','Filter','Guitar','Trophy','Puzzle','Flag','LifeRing','User','Eye','GraduationCap','HatWizzad','Snowman',];this.clipartNr=this.cliparts.indexOf(this.meta.bg);}
static get meshes()
{return{'TotalNodeClipartArrow:Left':'fontawesome/arrow-alt-circle-left-solid.obj','TotalNodeClipartArrow:Right':'fontawesome/arrow-alt-circle-right-solid.obj','TotalNodeClipart:Heart':'fontawesome/heart-solid.obj','TotalNodeClipart:Exclamation':'fontawesome/exclamation-circle-solid.obj','TotalNodeClipart:Question':'fontawesome/question-circle-solid.obj','TotalNodeClipart:Check':'fontawesome/check-circle-solid.obj','TotalNodeClipart:Times':'fontawesome/times-circle-solid.obj','TotalNodeClipart:Play':'fontawesome/play-circle-solid.obj','TotalNodeClipart:Stop':'fontawesome/stop-circle-solid.obj','TotalNodeClipart:Info':'fontawesome/info-circle-solid.obj','TotalNodeClipart:ThumbsUp':'fontawesome/thumbs-up-solid.obj','TotalNodeClipart:ThumbsDown':'fontawesome/thumbs-down-solid.obj','TotalNodeClipart:Star':'fontawesome/star-solid.obj','TotalNodeClipart:Bolt':'fontawesome/bolt-solid.obj','TotalNodeClipart:Sun':'fontawesome/sun-solid.obj','TotalNodeClipart:Cloud':'fontawesome/cloud-solid.obj','TotalNodeClipart:Calendar':'fontawesome/calendar-alt-regular.obj','TotalNodeClipart:CalendarCheck':'fontawesome/calendar-check-regular.obj','TotalNodeClipart:Calculator':'fontawesome/calculator-solid.obj','TotalNodeClipart:Poll':'fontawesome/poll-solid.obj','TotalNodeClipart:ProjectDiagram':'fontawesome/project-diagram-solid.obj','TotalNodeClipart:Server':'fontawesome/server-solid.obj','TotalNodeClipart:Desktop':'fontawesome/desktop-solid.obj','TotalNodeClipart:Laptop':'fontawesome/laptop-solid.obj','TotalNodeClipart:Tablet':'fontawesome/tablet-alt-solid.obj','TotalNodeClipart:Mobile':'fontawesome/mobile-alt-solid.obj','TotalNodeClipart:Keyboard':'fontawesome/keyboard-solid.obj','TotalNodeClipart:Gamepad':'fontawesome/gamepad-solid.obj','TotalNodeClipart:Headphones':'fontawesome/headphones-solid.obj','TotalNodeClipart:Microphone':'fontawesome/microphone-alt-solid.obj','TotalNodeClipart:Camera':'fontawesome/camera-solid.obj','TotalNodeClipart:Download':'fontawesome/download-solid.obj','TotalNodeClipart:HDD':'fontawesome/hdd-solid.obj','TotalNodeClipart:SD':'fontawesome/sd-card-solid.obj','TotalNodeClipart:Microchip':'fontawesome/microchip-solid.obj','TotalNodeClipart:Plug':'fontawesome/plug-solid.obj','TotalNodeClipart:Robot':'fontawesome/robot-solid.obj','TotalNodeClipart:Wifi':'fontawesome/wifi-solid.obj','TotalNodeClipart:SMS':'fontawesome/sms-solid.obj','TotalNodeClipart:Sliders':'fontawesome/sliders-h-solid.obj','TotalNodeClipart:Cog':'fontawesome/cog-solid.obj','TotalNodeClipart:Weight':'fontawesome/weight-hanging-solid.obj','TotalNodeClipart:Bug':'fontawesome/bug-solid.obj','TotalNodeClipart:Cat':'fontawesome/cat-solid.obj','TotalNodeClipart:Carrot':'fontawesome/carrot-solid.obj','TotalNodeClipart:Tree':'fontawesome/tree-solid.obj','TotalNodeClipart:Home':'fontawesome/home-solid.obj','TotalNodeClipart:Building':'fontawesome/building-solid.obj','TotalNodeClipart:DoorOpen':'fontawesome/door-open-solid.obj','TotalNodeClipart:Store':'fontawesome/store-solid.obj','TotalNodeClipart:ShoppingCart':'fontawesome/shopping-cart-solid.obj','TotalNodeClipart:Industry':'fontawesome/industry-solid.obj','TotalNodeClipart:SolarPanel':'fontawesome/solar-panel-solid.obj','TotalNodeClipart:Trash':'fontawesome/trash-alt-solid.obj','TotalNodeClipart:Car':'fontawesome/car-solid.obj','TotalNodeClipart:Truck':'fontawesome/truck-solid.obj','TotalNodeClipart:Bus':'fontawesome/bus-solid.obj','TotalNodeClipart:Subway':'fontawesome/subway-solid.obj','TotalNodeClipart:Plane':'fontawesome/plane-solid.obj','TotalNodeClipart:Rocket':'fontawesome/rocket-solid.obj','TotalNodeClipart:SuitcaseRolling':'fontawesome/suitcase-rolling-solid.obj','TotalNodeClipart:Dolly':'fontawesome/dolly-solid.obj','TotalNodeClipart:Globe':'fontawesome/globe-solid.obj','TotalNodeClipart:MapMarked':'fontawesome/map-marked-alt-solid.obj','TotalNodeClipart:Yen':'fontawesome/yen-sign-solid.obj','TotalNodeClipart:Euro':'fontawesome/euro-sign-solid.obj','TotalNodeClipart:Dollar':'fontawesome/dollar-sign-solid.obj','TotalNodeClipart:Bill':'fontawesome/money-bill-alt-solid.obj','TotalNodeClipart:CreditCard':'fontawesome/credit-card-solid.obj','TotalNodeClipart:Cookie':'fontawesome/cookie-bite-solid.obj','TotalNodeClipart:Cocktail':'fontawesome/glass-martini-alt-solid.obj','TotalNodeClipart:Key':'fontawesome/key-solid.obj','TotalNodeClipart:LockOpen':'fontawesome/lock-open-solid.obj','TotalNodeClipart:LockClosed':'fontawesome/lock-solid.obj','TotalNodeClipart:Clock':'fontawesome/clock-solid.obj','TotalNodeClipart:Hourglass':'fontawesome/hourglass-half-solid.obj','TotalNodeClipart:Envelope':'fontawesome/envelope-solid.obj','TotalNodeClipart:Paperclip':'fontawesome/paperclip-solid.obj','TotalNodeClipart:Feather':'fontawesome/feather-alt-solid.obj','TotalNodeClipart:Thermometer':'fontawesome/thermometer-three-quarters-solid.obj','TotalNodeClipart:Filter':'fontawesome/filter-solid.obj','TotalNodeClipart:Guitar':'fontawesome/guitar-solid.obj','TotalNodeClipart:Trophy':'fontawesome/trophy-solid.obj','TotalNodeClipart:Puzzle':'fontawesome/puzzle-piece-solid.obj','TotalNodeClipart:Flag':'fontawesome/flag-solid.obj','TotalNodeClipart:LifeRing':'fontawesome/life-ring-solid.obj','TotalNodeClipart:User':'fontawesome/user-solid.obj','TotalNodeClipart:Eye':'fontawesome/eye-regular.obj','TotalNodeClipart:GraduationCap':'fontawesome/graduation-cap-solid.obj','TotalNodeClipart:HatWizzad':'fontawesome/hat-wizard-solid.obj','TotalNodeClipart:Snowman':'fontawesome/snowman-solid.obj',};}
static get type()
{return'TotalNodeClipart';}
static get menu()
{return[];}
cache(obj3d)
{let circle=new THREE.CircleGeometry(2.5,16);let mesh=new THREE.Mesh(circle,three.material.fill);mesh.name='TotalNodeClipartBg';mesh.position.set(0.0,0.0,-0.01);obj3d.add(mesh);super.cache(obj3d);this.obj3d.children.map((mesh)=>{if(mesh.name.startsWith('TotalNodeClipart:'))mesh.material=three.material.clipart;});this.arrowLeft=this.getSubmesh('TotalNodeClipartArrow:Left')[0];this.arrowRight=this.getSubmesh('TotalNodeClipartArrow:Right')[0];this.arrowLeft.material=three.material.fill;this.arrowRight.material=three.material.fill;this.arrowLeft.position.x=-4.6;this.arrowRight.position.x=4.6;this.update();}
data()
{let attr=super.data();attr['type']=this.constructor.name;attr['meta']=this.meta;return attr;}
select()
{super.select();this.arrowLeft.visible=true;this.arrowRight.visible=true;}
deselect()
{super.deselect();this.arrowLeft.visible=false;this.arrowRight.visible=false;}
click(coords)
{super.click(coords);if(this.offset.x>3.2)this.selectNext();else if(this.offset.x<-3.2)this.selectPrev();}
selectPrev()
{this.clipartNr--;if(this.clipartNr<0)this.clipartNr=this.cliparts.length-1;this.meta.bg=this.cliparts[this.clipartNr];total.data.set(this.id,this.data());this.update();}
selectNext()
{this.clipartNr++;if(this.clipartNr>this.cliparts.length-1)this.clipartNr=0;this.meta.bg=this.cliparts[this.clipartNr];total.data.set(this.id,this.data());this.update();}
update()
{super.update();this.obj3d.children.map((mesh)=>{if(mesh.name!='TotalNodeClipartBg')mesh.visible=(mesh.name=='TotalNodeClipart:'+this.meta.bg?true:false);});}}
class TotalNodeFile extends TotalNode
{constructor(options)
{super(options);this.text=null;this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{title:'File',dir:'',file:'',mimetype:''};total.transfer.getEventSender().addEventListener('total-file-upload-done',this.fileUploadDone.bind(this));}
destructor()
{this.fileDelete();}
static get meshes()
{return{'TotalNodeFile:Upload':'fontawesome/file-upload-solid.obj','TotalNodeFile:Download':'fontawesome/file-download-solid.obj',};}
static get type()
{return'TotalNodeFile';}
static get menu()
{return[];}
cache(obj3d)
{super.cache(obj3d);this.visibleIcon();if(!this.text)
{this.text=new TotalText(this,this.meta.title,false,'left',{columns:20,rows:1,total:20},{size:6.0},{left:0.0,top:3.1,right:0.0,bottom:0.0},0xeeeeee);this.centerText();}}
data()
{let attr=super.data();attr['type']=this.constructor.name;this.meta.title=this.text?this.text.get():this.meta.title;attr['meta']=this.meta;return attr;}
visibleIcon()
{this.obj3d.children.map((mesh)=>{if(!this.meta.file)
{if(mesh.name=='TotalNodeFile:Download')mesh.visible=false;else if(mesh.name=='TotalNodeFile:Upload')mesh.visible=true;}
else
{if(mesh.name=='TotalNodeFile:Download')mesh.visible=true;else if(mesh.name=='TotalNodeFile:Upload')mesh.visible=false;}});}
click(coords)
{super.click(coords);if(Math.abs(this.offset.y)>3.0)
{this.text.edit(true);this.update();}}
dblclick(coords)
{if(!this.meta.file)this.fileUpload();else this.fileDownload();}
deselect()
{super.deselect();this.text.edit(false);}
blur()
{this.text.edit(false);this.update();}
keypress(event)
{this.text.keypress(event);this.centerText();}
fileUpload()
{total.transfer.chooseFile();}
fileUploadDone(event)
{this.fileUploadSave(event.detail);}
fileUploadSave(fileInfo)
{this.meta.dir=fileInfo.dir;this.meta.file=fileInfo.file;this.meta.mimetype=fileInfo.mimetype;this.visibleIcon();}
fileDownload()
{if(this.meta.file)total.transfer.downloadFile(this.meta.dir,this.meta.file);}
fileDelete()
{if(this.meta.file)total.transfer.deleteFile(this.meta.dir,this.meta.file);}}
class TotalNodeLabel extends TotalNode
{constructor(options)
{super(options);this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{text:''};this.text=null;this.editingStarted=false;}
static get type()
{return'TotalNodeLabel';}
static get meshes()
{return{};}
static get menu()
{return[];}
cache(obj3d)
{let box=new THREE.PlaneGeometry(7.0,1.1,1,1);let mesh=new THREE.Mesh(box,three.material.fill);mesh.name='TotalNodeLabel';mesh.position.set(this.x,this.y,this.z);three.scene.add(mesh);super.cache(mesh);if(!this.text)
{this.text=new TotalText(this,this.meta.text,false,'center',{columns:20,rows:1,total:0},{size:7.0-0.3-0.3},{left:0.0,top:-0.5,right:((7.0/2.0)-0.3),bottom:1.1});this.centerText();}}
data()
{let attr=super.data();attr['type']=this.constructor.name;this.meta.text=this.text?this.text.get():'';attr['meta']=this.meta;return attr;}
click(coords)
{super.click(coords);this.text.edit(true);}
deselect()
{super.deselect();this.text.edit(false);}
blur()
{this.text.edit(false);}
keypress(event)
{if(!this.editingStarted&&event.key!='Shift')
{this.setPositionOnFocus();this.editingStarted=true;}
this.text.keypress(event);this.centerText();}
paste(text)
{this.text.add(text);}
set width(value)
{}
set height(value)
{}
get width()
{return 7.0;}
get height()
{return 1.1;}}
class TotalNodeNote extends TotalNode
{constructor(options)
{super(options);this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{text:''};this.text=null;this.editingStarted=false;}
static get meshes()
{return{};}
static get type()
{return'TotalNodeNote';}
static get menu()
{return[{name:'Color: yellow (default)',option:'color',value:'yellow'},{name:'Color: orange',option:'color',value:'orange'},{name:'Color: green',option:'color',value:'green'},{name:'Color: blue',option:'color',value:'blue'},{name:'Color: pink &hearts;',option:'color',value:'pink'},];}
cache(obj3d)
{this.migrate();let box=new THREE.PlaneGeometry(7.62,7.62,1,1);let mesh=new THREE.Mesh(box,this.meta.color?three.material.note[this.meta.color]:three.material.note.yellow);mesh.name='TotalNodeNote';mesh.position.set(this.x,this.y,this.z);three.scene.add(mesh);super.cache(mesh);mesh.rotation.z=total.utils.random(-0.08,0.08);if(!this.text)
{this.text=new TotalText(this,this.meta.text,true,'left',{columns:25,rows:10,total:0},{size:7.62-0.3-0.3},{left:-((7.62/2.0)-0.3),top:-((7.62/2.0)-0.3),right:(7.62/2.0)-0.3,bottom:(7.62/2.0)-0.3});}}
migrate()
{if(this.meta.color=='default')this.meta.color='yellow';else if(this.meta.color=='#fca438')this.meta.color='orange';else if(this.meta.color=='#b5ea3b')this.meta.color='green';else if(this.meta.color=='#05c9c0')this.meta.color='blue';}
data()
{let attr=super.data();attr['type']=this.constructor.name;this.meta.text=this.text?this.text.get():'';attr['meta']=this.meta;return attr;}
option(option,value)
{super.option(option,value);if(option=='color')
{this.obj3d.material=three.material.note[this.meta.color];total.data.set(this.id,this.data());}}
click(coords)
{super.click(coords);this.text.edit(true);}
deselect()
{super.deselect();this.text.edit(false);}
blur()
{this.text.edit(false);}
keypress(event)
{if(!this.editingStarted&&event.key!='Shift')
{this.setPositionOnFocus();this.editingStarted=true;}
this.text.keypress(event);}
paste(text)
{this.text.add(text);}
set width(value)
{}
set height(value)
{}
get width()
{return 7.62;}
get height()
{return 7.62;}}
class TotalNodePage extends TotalNode
{constructor(options)
{super(options);this.meta=(options!==undefined&&options.meta!==undefined)?options.meta:{text:''};this.text=null;this.editingStarted=false;}
static get meshes()
{return{};}
static get type()
{return'TotalNodePage';}
static get menu()
{return[];}
cache(obj3d)
{let box=new THREE.PlaneGeometry(14.8,21.0,1,1);let mesh=new THREE.Mesh(box,three.material.fill);mesh.name='TotalNodePage';mesh.position.set(this.x,this.y,this.z);three.scene.add(mesh);super.cache(mesh);if(!this.text)
{this.text=new TotalText(this,this.meta.text,true,'left',{columns:65,rows:30,total:0},{size:14.8-0.5-0.5},{left:-((14.8/2.0)-0.3),top:-((21.0/2.0)-0.3),right:0.5,bottom:0.5});}}
data()
{let attr=super.data();attr['type']=this.constructor.name;this.meta.text=this.text?this.text.get():'';attr['meta']=this.meta;return attr;}
click(coords)
{super.click(coords);this.text.edit(true);}
deselect()
{super.deselect();this.text.edit(false);}
blur()
{this.text.edit(false);}
keypress(event)
{if(!this.editingStarted&&event.key!='Shift')
{this.setPositionOnFocus();this.editingStarted=true;}
this.text.keypress(event);}
paste(text)
{this.text.add(text);}
set width(value)
{}
set height(value)
{}
get width()
{return 14.8;}
get height()
{return 21.0;}}
